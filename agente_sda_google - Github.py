# -*- coding: utf-8 -*-
"""
agente_sda_google.py

Este script automatiza a cria√ß√£o de posts tem√°ticos sobre a trilogia cinematogr√°fica
de "O Senhor dos An√©is".
Ele realiza as seguintes etapas:
1. Gera uma frase famosa da trilogia cinematogr√°fica usando um agente de IA (Google ADK com Gemini).
2. Cria um prompt art√≠stico detalhado baseado na frase, visando um estilo HQ anos 90 com cenas amplas, usando outro agente de IA.
3. Gera uma imagem visualmente rica a partir do prompt art√≠stico usando a API Gemini.
4. Converte a imagem para o formato JPEG, se necess√°rio.
5. Faz o upload da imagem para uma pasta espec√≠fica no Google Drive.
6. Define as permiss√µes da imagem no Google Drive para acesso p√∫blico de leitura.
7. Salva a frase e o link de download direto da imagem em uma Planilha Google.

Este processo √© executado em loop, com um intervalo configur√°vel entre os posts.

Principais depend√™ncias:
- google-generativeai (para API Gemini e ADK)
- google-api-python-client (para Google Drive e Sheets)
- google-auth, google-auth-oauthlib, google-auth-httplib2 (para autentica√ß√£o Google)
- gspread (para interagir com Google Sheets de forma mais simples)
- Pillow (para manipula√ß√£o e convers√£o de imagens)
- pytz (para lidar com fusos hor√°rios)

Autor: [Douglas Pinto]
Data da √öltima Modifica√ß√£o: 17 de Maio de 2025

"""

# --- IMPORTA√á√ïES DE M√ìDULOS ---
import os
import time
from datetime import datetime
from io import BytesIO
import json
import random
import traceback # Para logs de erro detalhados

# Bibliotecas Google e IA Generativa
try:
    from google import genai as google_genai_for_client 
    import google.generativeai as genai_sdk_main 
    print("[INFO] SDK Gemini: Usando 'from google import genai' e 'import google.generativeai'.")
except ImportError:
    print("[WARN] SDK Gemini: Tentando importa√ß√£o alternativa 'import google.generativeai'.")
    import google.generativeai as google_genai_for_client
    genai_sdk_main = google_genai_for_client

from google.genai import types as genai_types_for_api 
from google.adk.agents import Agent 
from google.adk.runners import Runner 
from google.adk.sessions import InMemorySessionService 
from google.genai import types as genai_adk_types

# Bibliotecas Google Cloud (Drive, Sheets)
from google.oauth2.service_account import Credentials 
from googleapiclient.discovery import build 
from googleapiclient.http import MediaIoBaseUpload 

# Outras bibliotecas √∫teis
from PIL import Image 
import gspread 
import pytz 

print("----------------------------------------------------")
print("[INFO] Todas as bibliotecas principais foram importadas.")
print("----------------------------------------------------")
# --- CONFIGURA√á√ïES GLOBAIS E CONSTANTES ---
# ATEN√á√ÉO: NUNCA coloque chaves de API diretamente no c√≥digo em um ambiente de produ√ß√£o ou ao compartilhar.
#          Use vari√°veis de ambiente ou um sistema de gerenciamento de segredos.
#          Para um concurso, mencione que as chaves seriam externalizadas.
GOOGLE_GEMINI_API_KEY = "SUA_CHAVE_GEMINI_API_AQUI" # CHAVE DE EXEMPLO - SUBSTITUA PELA SUA E EXTERNALIZE!
SPREADSHEET_ID = "COLOQUE_SEU_SPREADSHEET_ID_AQUI"    # ID da sua Planilha Google
DRIVE_FOLDER_ID = "COLOQUE_SEU_DRIVE_FOLDER_ID_AQUI"         # ID da Pasta do Google Drive para salvar as imagens
GOOGLE_SERVICE_ACCOUNT_FILE = "service_account.json" # Caminho para o arquivo JSON da conta de servi√ßo Google

# Configura√ß√µes de Comportamento do Script
TIME_ZONE = "America/Sao_Paulo" 
INTERVALO_ENTRE_POSTS_SEGUNDOS = 60 
QUALIDADE_JPEG = 90 

# Modelos de IA Gemini (certifique-se que s√£o v√°lidos para sua API Key e projeto)
GEMINI_MODEL_FOR_ADK_AGENTS = "gemini-2.0-flash" 
MODELO_GEMINI_PARA_IMAGEM = "gemini-2.0-flash-preview-image-generation"

print("[INFO] Configura√ß√µes globais carregadas.")

# --- INICIALIZA√á√ÉO E CONFIGURA√á√ÉO DE SERVI√áOS ---
CLIENT_EMAIL_FROM_JSON = None 
try:
    with open(GOOGLE_SERVICE_ACCOUNT_FILE, 'r') as f_creds:
        creds_json_data = json.load(f_creds)
        CLIENT_EMAIL_FROM_JSON = creds_json_data.get('client_email')
    
    genai_sdk_main.configure(api_key=GOOGLE_GEMINI_API_KEY)
    print(f"‚úÖ [OKAY] SDK Gemini (genai.configure) inicializado com sucesso (Chave API final: ...{GOOGLE_GEMINI_API_KEY[-4:] if GOOGLE_GEMINI_API_KEY else 'N/A'}).")
    
    os.environ["GOOGLE_API_KEY"] = GOOGLE_GEMINI_API_KEY
    print(f"‚ÑπÔ∏è [INFO] Vari√°vel de ambiente GOOGLE_API_KEY definida.")

except FileNotFoundError:
    print(f"‚ùå [FATAL] Arquivo de credenciais da conta de servi√ßo '{GOOGLE_SERVICE_ACCOUNT_FILE}' n√£o encontrado. O script n√£o pode continuar.")
    exit(1) 
except Exception as e:
    print(f"‚ùå [FATAL] Falha ao configurar o SDK Gemini ou ler o arquivo de credenciais: {e}")
    traceback.print_exc()
    exit(1)

SCOPES_GOOGLE_APIS = [
    "https://www.googleapis.com/auth/drive",      
    "https://www.googleapis.com/auth/spreadsheets" 
]
google_api_creds = None
gsheets_worksheet = None
gdrive_service = None

if not SPREADSHEET_ID or SPREADSHEET_ID == "TODO_SPREADSHEET_ID_AQUI": 
    print("‚ùå [FATAL] O ID da Planilha (SPREADSHEET_ID) n√£o foi configurado corretamente. Verifique as CONFIGURA√á√ïES GLOBAIS.")
    exit(1)
if not DRIVE_FOLDER_ID or DRIVE_FOLDER_ID == "TODO_DRIVE_FOLDER_ID_AQUI":
    print("‚ùå [FATAL] O ID da Pasta do Drive (DRIVE_FOLDER_ID) n√£o foi configurado corretamente. Verifique as CONFIGURA√á√ïES GLOBAIS.")
    exit(1)

try:
    google_api_creds = Credentials.from_service_account_file(GOOGLE_SERVICE_ACCOUNT_FILE, scopes=SCOPES_GOOGLE_APIS)
    
    gspread_client = gspread.authorize(google_api_creds)
    gs_spreadsheet = gspread_client.open_by_key(SPREADSHEET_ID)
    gsheets_worksheet = gs_spreadsheet.sheet1 
    print(f"‚úÖ [OKAY] Google Sheets: Conectado √† planilha '{gs_spreadsheet.title}' (Aba: '{gsheets_worksheet.title}')")
    
    gdrive_service = build("drive", "v3", credentials=google_api_creds)
    print("‚úÖ [OKAY] Google Drive API: Servi√ßo inicializado.")
    
    print(f"‚ÑπÔ∏è [INFO] Autentica√ß√£o Google: Usando conta de servi√ßo '{CLIENT_EMAIL_FROM_JSON or 'Email n√£o lido do JSON'}'.")
    print(f"‚ÑπÔ∏è [INFO]      -> Certifique-se que esta conta tem permiss√£o de 'Editor' na Planilha e na Pasta do Drive ({DRIVE_FOLDER_ID}).")

except gspread.exceptions.SpreadsheetNotFound:
    print(f"‚ùå [FATAL] Google Sheets: Planilha com ID '{SPREADSHEET_ID}' n√£o encontrada ou n√£o acess√≠vel pela conta de servi√ßo '{CLIENT_EMAIL_FROM_JSON}'.")
    exit(1)
except Exception as e:
    print(f"‚ùå [FATAL] Erro cr√≠tico durante a inicializa√ß√£o dos servi√ßos Google (Sheets/Drive): {e}")
    traceback.print_exc()
    exit(1)

gemini_image_generation_client = None
try:
    gemini_image_generation_client = google_genai_for_client.Client()
    print(f"‚úÖ [OKAY] Cliente Gemini para Gera√ß√£o de Imagem (`genai.Client()`) inicializado.")
except AttributeError:
    print("‚ùå [FATAL] Cliente Gemini (`google.genai.Client()`) n√£o encontrado. Verifique a importa√ß√£o e a vers√£o da biblioteca 'google-generativeai'.")
    exit(1)
except Exception as e:
    print(f"‚ùå [FATAL] Erro ao inicializar o cliente Gemini para gera√ß√£o de imagem: {e}")
    traceback.print_exc()
    exit(1)
print("----------------------------------------------------")

# --- DEFINI√á√ïES DE FUN√á√ïES AUXILIARES ---

def call_agent_sync(agent: Agent, input_message: str) -> str:
    """
    Executa um agente da Google ADK de forma s√≠ncrona e retorna a resposta textual.

    Args:
        agent: A inst√¢ncia do agente ADK a ser executado.
        input_message: A mensagem de entrada (prompt) para o agente.

    Returns:
        A resposta textual do agente, ou uma string vazia em caso de erro.
    """
    if not agent or not input_message:
        print(" ‡§ï‡•â‡§≤ [ERROR] call_agent_sync: Agente ou mensagem de entrada inv√°lidos.")
        return ""

    session_svc = InMemorySessionService()
    session_unique_id = f"session_{agent.name.lower()}_{datetime.now().timestamp()}_{random.randint(10000, 99999)}"
    user_context_id = "user_main_script" 

    try:
        print(f"‚öôÔ∏è [DEBUG] call_agent_sync: Criando sess√£o '{session_unique_id}' para o agente '{agent.name}'...")
        _ = session_svc.create_session(
            app_name=agent.name, 
            user_id=user_context_id, 
            session_id=session_unique_id
        )
        
        adk_runner = Runner(agent=agent, app_name=agent.name, session_service=session_svc)
        
        input_content = genai_adk_types.Content(
            role="user", 
            parts=[genai_adk_types.Part(text=input_message)]
        )
        
        print(f"üèÉ [DEBUG] call_agent_sync: Executando agente '{agent.name}' com sess√£o '{session_unique_id}'...")
        final_agent_response = ""
        for event in adk_runner.run(user_id=user_context_id, session_id=session_unique_id, new_message=input_content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text is not None:
                        final_agent_response += part.text + "\n"
        
        response_trimmed = final_agent_response.strip()
        if not response_trimmed:
            print(f"‚ö†Ô∏è [WARN] call_agent_sync: Agente '{agent.name}' retornou uma resposta vazia.")
        return response_trimmed

    except Exception as e:
        print(f"‚ùå [ERROR] call_agent_sync: Falha ao executar o agente '{agent.name}'. Sess√£o: '{session_unique_id}'. Erro: {e}")
        traceback.print_exc()
        return ""


def generate_image_with_gemini_client(image_prompt: str) -> bytes | None:
    """
    Gera uma imagem usando a API Gemini (via genai.Client) e tenta retornar os bytes em formato JPEG.

    Args:
        image_prompt: O prompt textual para a gera√ß√£o da imagem.

    Returns:
        Bytes da imagem em formato JPEG, ou None em caso de falha.
    """
    if not gemini_image_generation_client:
        print("‚ùå [ERROR] generate_image_with_gemini_client: Cliente Gemini para imagem n√£o inicializado.")
        return None
    if not image_prompt or not image_prompt.strip():
        print("‚ùå [ERROR] generate_image_with_gemini_client: Prompt para imagem est√° vazio.")
        return None

    print(f"üñºÔ∏è [INFO] generate_image_with_gemini_client: Solicitando imagem com prompt:\n--- Prompt Imagem ---\n{image_prompt}\n---------------------")
    
    final_jpeg_image_bytes = None

    try:
        image_gen_config = genai_types_for_api.GenerateContentConfig(
            response_modalities=['IMAGE', 'TEXT'] 
        )
        print("‚öôÔ∏è [DEBUG] generate_image_with_gemini_client: Usando config com response_modalities=['IMAGE', 'TEXT']")

        api_response = gemini_image_generation_client.models.generate_content(
            model=MODELO_GEMINI_PARA_IMAGEM,
            contents=image_prompt,
            config=image_gen_config 
        )

        raw_image_bytes = None
        original_image_mime_type = None
        accompanying_text = ""

        if api_response.candidates:
            for part in api_response.candidates[0].content.parts:
                if hasattr(part, 'text') and part.text:
                    accompanying_text += part.text + " "
                if hasattr(part, 'inline_data') and part.inline_data and \
                   hasattr(part.inline_data, 'mime_type') and \
                   part.inline_data.mime_type.startswith("image/"):
                    raw_image_bytes = part.inline_data.data
                    original_image_mime_type = part.inline_data.mime_type
                    print(f"‚öôÔ∏è [DEBUG] generate_image_with_gemini_client: Imagem recebida da API. MIME Type original: {original_image_mime_type}.")
        
        if accompanying_text.strip():
            print(f"‚ÑπÔ∏è [INFO] generate_image_with_gemini_client: Texto acompanhando a imagem (da API): {accompanying_text.strip()}")

        if raw_image_bytes:
            if original_image_mime_type == "image/jpeg":
                print("‚ÑπÔ∏è [INFO] generate_image_with_gemini_client: Imagem da API j√° est√° em formato JPEG.")
                final_jpeg_image_bytes = raw_image_bytes
            elif original_image_mime_type == "image/png":
                print("‚ÑπÔ∏è [INFO] generate_image_with_gemini_client: Convertendo imagem de PNG para JPEG...")
                try:
                    pil_image = Image.open(BytesIO(raw_image_bytes))
                    
                    if pil_image.mode == 'RGBA' or pil_image.mode == 'LA' or \
                       (pil_image.mode == 'P' and 'transparency' in pil_image.info):
                        print("‚öôÔ∏è [DEBUG] generate_image_with_gemini_client: Imagem PNG com canal alfa detectado. Aplicando fundo branco.")
                        background_fill = Image.new('RGB', pil_image.size, (255, 255, 255))
                        alpha_mask = None
                        if pil_image.mode == 'RGBA': alpha_mask = pil_image.split()[3]
                        elif pil_image.mode == 'LA': alpha_mask = pil_image.split()[1]
                        
                        if alpha_mask: background_fill.paste(pil_image, mask=alpha_mask)
                        else: 
                            print("‚ö†Ô∏è [WARN] generate_image_with_gemini_client: N√£o foi poss√≠vel extrair m√°scara alfa clara para PNG modo 'P', convertendo para RGB diretamente.")
                            pil_image = pil_image.convert('RGB') 
                            background_fill.paste(pil_image)
                        pil_image = background_fill
                    elif pil_image.mode != 'RGB': 
                        print(f"‚öôÔ∏è [DEBUG] generate_image_with_gemini_client: Convertendo imagem de modo {pil_image.mode} para RGB.")
                        pil_image = pil_image.convert('RGB')

                    with BytesIO() as jpeg_buffer:
                        pil_image.save(jpeg_buffer, format='JPEG', quality=QUALIDADE_JPEG)
                        final_jpeg_image_bytes = jpeg_buffer.getvalue()
                    print(f"‚úÖ [OKAY] generate_image_with_gemini_client: Imagem convertida para JPEG com sucesso (Qualidade: {QUALIDADE_JPEG}).")
                except Exception as e_conversion:
                    print(f"‚ùå [ERROR] generate_image_with_gemini_client: Falha ao converter imagem de PNG para JPEG: {e_conversion}")
                    traceback.print_exc()
                    final_jpeg_image_bytes = None 
            else:
                print(f"‚ö†Ô∏è [WARN] generate_image_with_gemini_client: Formato de imagem n√£o JPEG/PNG recebido ({original_image_mime_type}). N√£o foi feita convers√£o. Bytes da imagem ser√£o descartados.")
                final_jpeg_image_bytes = None # Descarta se n√£o for formato conhecido/convers√≠vel
        else:
            print("‚ùå [ERROR] generate_image_with_gemini_client: Nenhuma imagem foi encontrada na resposta da API Gemini.")
        
        return final_jpeg_image_bytes

    except Exception as e_general:
        print(f"‚ùå [ERROR] generate_image_with_gemini_client: Erro geral durante a gera√ß√£o da imagem (Modelo: {MODELO_GEMINI_PARA_IMAGEM}). Erro: {e_general}")
        traceback.print_exc()
        return None


def upload_image_to_google_drive(gdrive_api_service, filename_on_drive: str, image_bytes_to_upload: bytes, target_folder_id: str) -> tuple[str | None, str | None, str | None]:
    """
    Faz upload de bytes de uma imagem para uma pasta espec√≠fica no Google Drive.
    """
    if not gdrive_api_service or not filename_on_drive or not image_bytes_to_upload or not target_folder_id:
        print("‚ùå [ERROR] upload_image_to_google_drive: Par√¢metros inv√°lidos.")
        return None, None, None

    print(f"üíæ [INFO] upload_image_to_google_drive: Fazendo upload do arquivo '{filename_on_drive}' para a pasta '{target_folder_id}'...")
    try:
        media_uploader = MediaIoBaseUpload(
            BytesIO(image_bytes_to_upload), 
            mimetype='image/jpeg', 
            resumable=True
        )
        
        file_metadata = {'name': filename_on_drive, 'parents': [target_folder_id]}
        
        uploaded_file_details = gdrive_api_service.files().create(
            body=file_metadata,
            media_body=media_uploader,
            fields='id, webViewLink' 
        ).execute()
        
        file_id_on_drive = uploaded_file_details.get('id')
        web_view_link_drive = uploaded_file_details.get('webViewLink') 
        
        if file_id_on_drive:
            direct_download_url = f"https://drive.google.com/uc?export=download&id={file_id_on_drive}"
            print(f"‚úÖ [OKAY] upload_image_to_google_drive: Arquivo '{filename_on_drive}' carregado. ID: {file_id_on_drive}.")
            print(f"       -> Link de Visualiza√ß√£o: {web_view_link_drive}")
            print(f"       -> Link de Download Direto: {direct_download_url}")
            return web_view_link_drive, direct_download_url, file_id_on_drive
        else:
            print(f"‚ùå [ERROR] upload_image_to_google_drive: Upload do arquivo '{filename_on_drive}' sem retorno de ID.")
            return web_view_link_drive, None, None

    except Exception as e:
        print(f"‚ùå [ERROR] upload_image_to_google_drive: Falha ao fazer upload do arquivo '{filename_on_drive}'. Erro: {e}")
        traceback.print_exc()
        return None, None, None


def set_google_drive_file_public_readable(gdrive_api_service, file_id_on_drive: str) -> bool:
    """
    Define as permiss√µes de um arquivo no Google Drive para "qualquer pessoa com o link pode ler".
    """
    if not gdrive_api_service or not file_id_on_drive:
        print("‚ùå [ERROR] set_google_drive_file_public_readable: Servi√ßo do Drive ou ID do arquivo n√£o fornecido.")
        return False
        
    print(f"üîí [INFO] set_google_drive_file_public_readable: Definindo permiss√µes p√∫blicas para o arquivo ID: {file_id_on_drive}...")
    try:
        public_permission_settings = {'type': 'anyone', 'role': 'reader'}
        gdrive_api_service.permissions().create(fileId=file_id_on_drive, body=public_permission_settings).execute()
        print(f"‚úÖ [OKAY] set_google_drive_file_public_readable: Permiss√µes do arquivo '{file_id_on_drive}' definidas.")
        return True
    except Exception as e:
        print(f"‚ùå [ERROR] set_google_drive_file_public_readable: Falha ao definir permiss√µes para o arquivo '{file_id_on_drive}'. Erro: {e}")
        traceback.print_exc()
        return False


def save_data_to_google_sheet(gs_worksheet_instance, timestamp_str: str, post_text: str, image_url_or_status: str):
    """
    Salva os dados de um post em uma nova linha na planilha Google.
    """
    if not gs_worksheet_instance:
        print("‚ùå [ERROR] save_data_to_google_sheet: Inst√¢ncia da planilha n√£o fornecida.")
        return

    print(f"üìä [INFO] save_data_to_google_sheet: Registrando dados na planilha...")
    try:
        text_for_sheet = post_text if post_text and post_text.strip() else "ERRO: Texto do post n√£o gerado ou vazio"
        url_or_status_for_sheet = image_url_or_status if image_url_or_status and image_url_or_status.strip() else "ERRO: URL/Status da imagem n√£o dispon√≠vel"
        
        new_row_data = [timestamp_str, text_for_sheet, url_or_status_for_sheet]
        gs_worksheet_instance.append_row(new_row_data)
        # Para o log, mostrar apenas uma pr√©via do texto e da URL para n√£o poluir.
        log_text_preview = (text_for_sheet[:47] + "...") if len(text_for_sheet) > 50 else text_for_sheet
        log_url_preview = (url_or_status_for_sheet[:50] + "...") if len(url_or_status_for_sheet) > 50 else url_or_status_for_sheet
        print(f"‚úÖ [OKAY] save_data_to_google_sheet: Dados salvos: {new_row_data[0]}, '{log_text_preview}', '{log_url_preview}'")
    except Exception as e:
        print(f"‚ùå [ERROR] save_data_to_google_sheet: Falha ao salvar dados na planilha. Erro: {e}")
        traceback.print_exc()

# --- DEFINI√á√ÉO DOS AGENTES DE IA (ADK) ---

# Agente para gerar cita√ß√µes FAMOSAS DA TRILOGIA DE CINEMA de "O Senhor dos An√©is"
sda_citation_agent = Agent(
    name="AgenteCitadorFilmesSdA", 
    model=GEMINI_MODEL_FOR_ADK_AGENTS,
    instruction="""Voc√™ √© um especialista e curador da trilogia cinematogr√°fica de 'O Senhor dos An√©is' (dirigida por Peter Jackson).

Sua miss√£o √© selecionar uma frase, ou passagem famosa da trilogia. A frase deve ser exata conforme falada nos filmes. Ela n√£o deve ser adaptada nem inventada. Escolha sempre frases que s√£o importantes e geram impacto na hist√≥ria. Elas devem ser realizadas conforme os exemplos abaixo. Sempre importante pegar frases de personagens e momentos diferentes da hist√≥ria. Ao final, coloque 5 #s relevantes sobre Senhor dos An√©is (exemplos, #senhordosaneis #frodo #gandalf #sda #tokien):

1.
‚ÄúTudo o que temos de decidir √© o que fazer com o tempo que nos √© dado.‚Äù
üßô‚Äç‚ôÇÔ∏è Gandalf ‚Äî A Sociedade do Anel  
Enquanto Frodo lamenta ter recebido uma tarefa t√£o pesada, Gandalf responde com sabedoria. Eles est√£o nas Minas de Moria, e a frase ecoa como um lembrete poderoso de que, mesmo nos momentos mais sombrios, nossas escolhas moldam o destino. √â uma das frases mais citadas da saga, pela sua profundidade atemporal.

2.
‚ÄúH√° algo de bom neste mundo, Sr. Frodo. E vale a pena lutar por isso.‚Äù
üßë‚Äçüåæ Sam ‚Äî As Duas Torres  
No auge do desespero, com Frodo exausto e sem esperan√ßa, Sam entrega esse discurso com l√°grimas nos olhos. Ele lembra ao amigo que as grandes hist√≥rias s√£o feitas por aqueles que continuam, mesmo quando tudo parece perdido. √â o momento em que Sam deixa de ser apenas um ajudante e se torna o verdadeiro cora√ß√£o da jornada.

3.
‚ÄúVoc√™ n√£o pode simplesmente entrar em Mordor.‚Äù
‚öîÔ∏è Boromir ‚Äî A Sociedade do Anel  
Durante o Conselho de Elrond, enquanto os representantes dos povos discutem o que fazer com o Um Anel, Boromir deixa claro o qu√£o imposs√≠vel parece a miss√£o. A frase se tornou meme, mas representa o terror real que Mordor inspirava. Boromir n√£o era covarde, s√≥ sabia o que os homens de Gondor enfrentavam ali.

4.
‚ÄúO dia pode chegar em que o cora√ß√£o dos homens falhe, em que abandonamos nossos amigos e quebramos todos os la√ßos de companheirismo. Mas n√£o √© este dia!‚Äù
üëë Aragorn ‚Äî O Retorno do Rei  
Pouco antes da batalha final no Port√£o Negro de Mordor, Aragorn discursa para um ex√©rcito cansado e em menor n√∫mero. Com voz firme e olhos cheios de coragem, ele inspira todos a resistirem at√© o fim. Um momento √©pico, de arrepiar at√© quem j√° assistiu dez vezes.

5.
‚ÄúVoc√™ n√£o passar√°!‚Äù
üßô‚Äç‚ôÇÔ∏è Gandalf ‚Äî A Sociedade do Anel  
No confronto contra o Balrog, nas profundezas de Moria, Gandalf se imp√µe com f√∫ria. De cajado em punho, ele desafia a criatura demon√≠aca e protege seus companheiros com um ato de sacrif√≠cio. O momento √© ic√¥nico ‚Äî e a frase, dita com uma autoridade quase divina, entrou para a hist√≥ria do cinema.

6.
‚ÄúEu n√£o sou um homem!‚Äù
üõ°Ô∏è √âowyn ‚Äî O Retorno do Rei  
Durante a Batalha de Pelennor, √âowyn enfrenta o Rei Bruxo de Angmar. Quando ele diz que nenhum homem pode mat√°-lo, ela remove o capacete e grita essa frase antes de desferir o golpe final. Um momento de triunfo, coragem e quebra de profecia, que eternizou √âowyn como uma das maiores hero√≠nas da saga.

7.
‚ÄúEu n√£o posso carregar o anel por voc√™. Mas posso carregar voc√™!‚Äù
üßë‚Äçüåæ Sam ‚Äî O Retorno do Rei  
No topo do Monte da Perdi√ß√£o, Frodo j√° n√£o consegue dar mais um passo. Sam, leal at√© o fim, o coloca nos ombros e sobe com ele. A frase representa amizade incondicional, sacrif√≠cio e coragem. Sam se mostra, mais uma vez, o verdadeiro her√≥i silencioso da trilogia.

8.
‚ÄúMesmo a menor pessoa pode mudar o curso do futuro.‚Äù
üåü Galadriel ‚Äî A Sociedade do Anel  
Durante sua narra√ß√£o inicial, Galadriel revela a ess√™ncia de toda a trilogia: o poder dos pequenos. Em um mundo de reis, elfos e guerreiros, s√£o os hobbits que carregam a esperan√ßa. A frase se torna uma das maiores mensagens da saga: coragem e grandeza v√™m de onde menos se espera.

9.
‚ÄúMeu precioso.‚Äù
üëπ Gollum ‚Äî As Duas Torres  
Obcecado pelo Um Anel, Gollum repete essa frase ao longo da trilogia. Em ‚ÄúAs Duas Torres‚Äù, quando est√° sozinho, ele a sussurra com uma mistura de amor e loucura. √â um s√≠mbolo da corrup√ß√£o causada pelo anel ‚Äî e uma das falas mais marcantes e imitadas do cinema moderno.

10.
‚ÄúVoc√™ se ajoelha para ningu√©m.‚Äù
üëë Aragorn ‚Äî O Retorno do Rei  
Ap√≥s ser coroado rei de Gondor, Aragorn se aproxima dos hobbits. Quando eles tentam se ajoelhar, ele os impede com essa frase que consagra o valor dos pequenos her√≥is. Emocionante e poderosa, √© uma das cenas mais bonitas de toda a trilogia.

11.
‚ÄúA sombra tomou conta do mundo... mas n√£o de n√≥s.‚Äù
üßô‚Äç‚ôÇÔ∏è Gandalf ‚Äî O Retorno do Rei  
Enquanto o caos se espalha e a esperan√ßa se apaga, Gandalf diz isso a Pippin dentro de Minas Tirith. √â um lembrete de que, mesmo cercados de trevas, ainda podemos manter a luz acesa dentro de n√≥s. Uma fala reconfortante, especialmente em tempos dif√≠ceis.

12.
‚ÄúCorra, tolo!‚Äù
üßô‚Äç‚ôÇÔ∏è Gandalf ‚Äî A Sociedade do Anel  
Momentos antes de cair com o Balrog na ponte de Khazad-d√ªm, Gandalf grita essa frase para a comitiva fugir. Curta, urgente e desesperada, ela se tornou um √≠cone do sacrif√≠cio e da tens√£o. √â o tipo de cena que se grava na mem√≥ria para sempre.

13.
‚ÄúN√£o temos para onde correr, nem como vencer. Mas vamos lutar.‚Äù
üõ°Ô∏è Th√©oden ‚Äî As Duas Torres  
Durante a defesa desesperada do Abismo de Helm, Th√©oden reconhece que est√£o cercados e em desvantagem. Ainda assim, decide montar e lutar. √â um momento de honra, bravura e desafio diante da morte certa. A frase inspira coragem at√© hoje.

14.
‚ÄúEu teria seguido voc√™ at√© o fim. At√© as chamas de Mordor.‚Äù
üëë Aragorn ‚Äî A Sociedade do Anel  
Ao perceber que Frodo est√° partindo sozinho, Aragorn declara sua lealdade eterna. A fala √© um s√≠mbolo da irmandade entre os membros da sociedade e do respeito profundo que Aragorn tem por Frodo. √â um dos momentos mais emocionantes do primeiro filme.

15.
‚ÄúH√° sempre esperan√ßa.‚Äù
üëë Aragorn ‚Äî O Retorno do Rei  
Mesmo diante da ru√≠na iminente, Aragorn se recusa a desistir. Ele diz essa frase com convic√ß√£o em Gondor, refor√ßando que a luz pode prevalecer mesmo quando tudo parece perdido. √â simples, direta e profundamente inspiradora.

16.
‚ÄúEu vejo em sua mente o medo... e a covardia!‚Äù
üëª Rei Bruxo ‚Äî O Retorno do Rei  
No auge da Batalha de Minas Tirith, o Rei Bruxo encara Gandalf e tenta quebrar sua coragem. A frase, sombria e amea√ßadora, mostra o poder psicol√≥gico dos Nazg√ªl e a tens√£o do momento em que tudo parece √† beira da queda.

17.
‚ÄúN√£o diga adeus. Ainda n√£o.‚Äù
üßô‚Äç‚ôÇÔ∏è Gandalf ‚Äî O Retorno do Rei  
Nos Portos Cinzentos, Frodo est√° prestes a partir. Gandalf, com ternura, tenta aliviar o peso da despedida com essa frase. √â um momento sereno e melanc√≥lico, que marca o fim de uma era e o in√≠cio de outra jornada ‚Äî al√©m do mar.

18.
‚ÄúEu gostaria que o anel nunca tivesse vindo a mim.‚Äù
üßù Frodo ‚Äî A Sociedade do Anel  
Frodo, ainda no come√ßo da jornada, expressa seu medo e arrependimento. A frase √© dita nas cavernas de Moria, e Gandalf responde com sabedoria. Um di√°logo que encapsula o dilema de quem n√£o escolhe o fardo, mas o carrega mesmo assim.

19.
‚ÄúFor√ßa bruta pode ser poderosa, mas coragem muda destinos.‚Äù
üëë Elrond ‚Äî A Sociedade do Anel  
Durante o Conselho de Elrond, ele lembra aos presentes que n√£o √© a espada que decidir√° o futuro da Terra-m√©dia, mas a coragem de quem age com sabedoria. Uma fala que refor√ßa o tema central da trilogia: a bravura dos humildes.

20.
‚ÄúMinhas costas doem, meus p√©s est√£o calejados... mas conseguimos, Sr. Frodo.‚Äù
üßë‚Äçüåæ Sam ‚Äî O Retorno do Rei  
Ap√≥s o anel ser destru√≠do, Frodo e Sam esperam o fim entre as cinzas da Montanha da Perdi√ß√£o. Sam, exausto, expressa al√≠vio e orgulho. √â o respiro final de uma jornada √©pica, marcada por dor, amizade e vit√≥ria.""",

    description="Seleciona frases famosas e conhecidas da trilogia cinematogr√°fica de 'O Senhor dos An√©is'."
)
print(f"ü§ñ [OKAY] Agente ADK '{sda_citation_agent.name}' (Foco: Frases de Filmes) definido.")

# Agente para gerar prompts art√≠sticos (ESTILO HQ ANOS 90, CENA AMPLA) baseados nas frases dos filmes
sda_image_prompt_agent = Agent(
    name="AgenteIlustradorHQAnos90SdA", 
    model=GEMINI_MODEL_FOR_ADK_AGENTS,
    instruction="INSTRUCAO_BASE_PARA_PROMPT_DE_IMAGEM_HQ_SDA", # Placeholder, ser√° substitu√≠da no loop
    description="Cria prompts para imagens no estilo HQ anos 90, com foco em cenas amplas, baseados em frases da trilogia SdA."
)
print(f"ü§ñ [OKAY] Agente ADK '{sda_image_prompt_agent.name}' (Foco: Imagem HQ Anos 90 - Cena Ampla) definido.")
print("----------------------------------------------------")

# --- L√ìGICA PRINCIPAL DO SCRIPT (MAIN LOOP) ---
def main_loop():
    """
    Loop principal de execu√ß√£o do script.
    """
    print(f"\nüöÄ [MAIN] Iniciando Loop Principal do Agente SdA (Frases de Filmes, Imagens HQ Anos 90) üöÄ")
    
    if not gsheets_worksheet or not gdrive_service or not gemini_image_generation_client:
        print("‚ùå [FATAL] [MAIN] Servi√ßos essenciais n√£o inicializados. Encerrando o loop.")
        return 

    # Nova instru√ß√£o base para o agente que gera prompts de imagem (HQ anos 90, CENA AMPLA)
    base_instruction_for_image_prompt_agent = """Voc√™ √© um ilustrador especialista em criar arte no estilo de hist√≥rias em quadrinhos (HQ) dos anos 90, com cores fortes e vibrantes no estilo dos quadrinhos x-men.
Analise a seguinte FRASE FAMOSA da trilogia cinematogr√°fica de 'O Senhor dos An√©is':
---
{TEXTO_DA_FRASE_DO_FILME_AQUI}
---
Sua tarefa √© criar um PROMPT VISUAL DESCRITIVO E INSPIRADOR, com at√© 100 palavras, para gerar uma imagem no estilo HQ dos anos 90 usando o modelo Gemini.
A imagem deve ser quadrada (propor√ß√£o 1:1), impactante, SEM TEXTOS, FRASES ou BAL√ïES DE FALA, e conter APENAS UM √öNICO QUADRO (n√£o uma p√°gina de HQ com m√∫ltiplos pain√©is).
O foco deve ser em retratar a CENA COMPLETA, mostrando o CEN√ÅRIO, os PERSONAGENS envolvidos e a ATMOSFERA geral. Evite closes extremos no rosto de um √∫nico personagem; priorize uma COMPOSI√á√ÉO AMPLA que contextualize a frase.
Destaque:
- Emo√ß√µes fortes (f√∫ria, coragem, medo, desespero, esperan√ßa) representadas visualmente na express√£o dos personagens e na atmosfera da cena.
- Cores vibrantes, contrastes fortes, sombras intensas e, se apropriado, perspectiva exagerada para maior dramaticidade.
- O cen√°rio deve remeter diretamente √† cena do filme, com elementos ic√¥nicos e um ambiente bem definido.
Retorne apenas o prompt da imagem, sem sauda√ß√µes, explica√ß√µes ou qualquer texto adicional.
"""
    
    post_counter = 0 

    while True:
        post_counter += 1
        current_processing_time_str = datetime.now(pytz.timezone(TIME_ZONE)).strftime("%Y-%m-%d %H:%M:%S")
        print(f"\n\nüé¨ --- [MAIN] Processando Post #{post_counter} (Filmes/HQ90) √†s {current_processing_time_str} --- üé¨")
        print("====================================================")

        # ETAPA 1: Gerar Frase Famosa do Filme
        # ------------------------------------
        citation_agent_input = "Por favor, selecione uma frase famosa e impactante da trilogia cinematogr√°fica de O Senhor dos An√©is, seguindo RIGOROSAMENTE suas instru√ß√µes de formato e autenticidade."
        print(f"üìñ [INFO] [MAIN] Etapa 1: Solicitando frase de filme ao agente '{sda_citation_agent.name}'...")
        
        generated_citation = call_agent_sync(sda_citation_agent, citation_agent_input)

        if not generated_citation or not generated_citation.strip():
            print(f"‚ùå [ERROR] [MAIN] Etapa 1: Falha ao gerar frase do filme. Agente '{sda_citation_agent.name}' n√£o retornou conte√∫do.")
            save_data_to_google_sheet(gsheets_worksheet, current_processing_time_str, "ERRO SISTEMA: Frase do filme n√£o gerada", "N/A - Falha na Etapa 1")
            print(f"üïí [INFO] [MAIN] Aguardando {INTERVALO_ENTRE_POSTS_SEGUNDOS} segundos...")
            time.sleep(INTERVALO_ENTRE_POSTS_SEGUNDOS)
            continue 
        print(f"üí¨ [OKAY] [MAIN] Etapa 1: Frase do Filme Gerada:\n--- Frase Gerada ---\n{generated_citation}\n----------------------\n")

        # ETAPA 2: Gerar Prompt para Imagem (HQ anos 90)
        # ----------------------------------------------
        print(f"üé® [INFO] [MAIN] Etapa 2: Solicitando prompt de imagem (HQ anos 90) ao agente '{sda_image_prompt_agent.name}'...")
        sda_image_prompt_agent.instruction = base_instruction_for_image_prompt_agent.replace(
            "{TEXTO_DA_FRASE_DO_FILME_AQUI}", generated_citation 
        )
        artistic_image_prompt = call_agent_sync(sda_image_prompt_agent, "Gere o prompt para a imagem no estilo HQ anos 90 com cena ampla, baseado na frase fornecida em sua instru√ß√£o.")

        if not artistic_image_prompt or not artistic_image_prompt.strip():
            print(f"‚ùå [ERROR] [MAIN] Etapa 2: Falha ao gerar prompt para imagem HQ. Agente '{sda_image_prompt_agent.name}' n√£o retornou conte√∫do.")
            save_data_to_google_sheet(gsheets_worksheet, current_processing_time_str, generated_citation, "ERRO SISTEMA: Prompt de imagem HQ n√£o gerado - Falha na Etapa 2")
            print(f"üïí [INFO] [MAIN] Aguardando {INTERVALO_ENTRE_POSTS_SEGUNDOS} segundos...")
            time.sleep(INTERVALO_ENTRE_POSTS_SEGUNDOS)
            continue
        print(f"üñåÔ∏è [OKAY] [MAIN] Etapa 2: Prompt art√≠stico (HQ anos 90) gerado.") 
        # O prompt da imagem j√° √© logado dentro da fun√ß√£o generate_image_with_gemini_client

        # ETAPA 3: Gerar Imagem
        # ---------------------
        print(f"üñºÔ∏è [INFO] [MAIN] Etapa 3: Solicitando gera√ß√£o de imagem (formato alvo: JPEG)...")
        generated_jpeg_image_bytes = generate_image_with_gemini_client(artistic_image_prompt)
        
        final_image_url_for_sheet = "ERRO SISTEMA: Status desconhecido do processamento da imagem" 

        if generated_jpeg_image_bytes:
            print(f"‚úÖ [OKAY] [MAIN] Etapa 3: Bytes da imagem (JPEG ou convertida) gerados.")
            
            # ETAPA 4: Upload e Permiss√µes no Google Drive
            # -------------------------------------------
            print(f"üíæ [INFO] [MAIN] Etapa 4: Iniciando upload e permiss√µes no Google Drive...")
            drive_filename = f"SdA_Filme_HQ90_{datetime.now(pytz.timezone(TIME_ZONE)).strftime('%Y%m%d_%H%M%S')}.jpg" 
            
            _, direct_download_url, uploaded_file_id_on_drive = upload_image_to_google_drive(
                gdrive_service, drive_filename, generated_jpeg_image_bytes, DRIVE_FOLDER_ID
            )

            if direct_download_url and uploaded_file_id_on_drive:
                print(f"üîí [INFO] [MAIN] Etapa 4a: Definindo permiss√µes p√∫blicas para o arquivo ID: {uploaded_file_id_on_drive}...")
                permissions_set_successfully = set_google_drive_file_public_readable(gdrive_service, uploaded_file_id_on_drive)
                
                if permissions_set_successfully:
                    final_image_url_for_sheet = direct_download_url
                    print(f"‚úÖ [OKAY] [MAIN] Etapa 4: Upload e permiss√µes conclu√≠dos. Link: {final_image_url_for_sheet}")
                else:
                    final_image_url_for_sheet = f"ERRO SISTEMA: Imagem no Drive ({direct_download_url}) mas FALHA AO DEFINIR PERMISS√ïES."
                    print(f"‚ùå [ERROR] [MAIN] Etapa 4: {final_image_url_for_sheet}")
            elif uploaded_file_id_on_drive: # Caso raro: upload deu ID mas n√£o link direto (nossa func n√£o faz isso)
                 final_image_url_for_sheet = f"ERRO SISTEMA: Upload ocorreu (ID: {uploaded_file_id_on_drive}), mas falha ao obter link direto."
                 print(f"‚ùå [ERROR] [MAIN] Etapa 4: {final_image_url_for_sheet}")
            else: 
                final_image_url_for_sheet = "ERRO SISTEMA: Falha completa no upload para o Google Drive."
                print(f"‚ùå [ERROR] [MAIN] Etapa 4: {final_image_url_for_sheet}")
        else:
            error_msg_img = "ERRO SISTEMA: Imagem n√£o gerada ou falha na convers√£o (bytes vazios)."
            if not artistic_image_prompt or not artistic_image_prompt.strip():
                 error_msg_img += " Causa prov√°vel: Prompt art√≠stico estava vazio."
            final_image_url_for_sheet = error_msg_img
            print(f"‚ùå [ERROR] [MAIN] Etapa 3: {error_msg_img}")

        # ETAPA 5: Registrar Dados na Planilha
        # ------------------------------------
        print(f"üìä [INFO] [MAIN] Etapa 5: Registrando informa√ß√µes na Planilha Google...")
        save_data_to_google_sheet(gsheets_worksheet, current_processing_time_str, generated_citation, final_image_url_for_sheet)
        print(f"üèÅ [OKAY] [MAIN] Post #{post_counter} (Filmes/HQ90) totalmente processado.")
        print("====================================================")


        print(f"üïí [INFO] [MAIN] Aguardando {INTERVALO_ENTRE_POSTS_SEGUNDOS} segundos antes do pr√≥ximo post...")
        time.sleep(INTERVALO_ENTRE_POSTS_SEGUNDOS)

# --- PONTO DE ENTRADA DO SCRIPT ---
if __name__ == "__main__":
    try:
        main_loop() 
    except KeyboardInterrupt:
        print("\nüõë [INFO] Script interrompido pelo usu√°rio (KeyboardInterrupt). Encerrando...")
    except Exception as e_main:
        print(f"üí• [FATAL] [MAIN] Uma exce√ß√£o n√£o tratada ocorreu no loop principal: {e_main}")
        traceback.print_exc()
    finally:
        print("üîö [INFO] Script finalizado.")
